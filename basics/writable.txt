About Node.js®

As an asynchronous event driven JavaScript runtime, Node is designed to build scalable network applications. In the following "hello world" example, many connections can be handled concurrently. Upon each connection the callback is fired, but if there is no work to be done, Node will sleep.

const http = require('http');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello World\n');
});

server.listen(port, hostname, () => {
  console.log(`Server running at http://${hostname}:${port}/`);
});

This is in contrast to today's more common concurrency model where OS threads are employed. Thread-based networking is relatively inefficient and very difficult to use. Furthermore, users of Node are free from worries of dead-locking the process, since there are no locks. Almost no function in Node directly performs I/O, so the process never blocks. Because nothing blocks, scalable systems are very reasonable to develop in Node.

If some of this language is unfamiliar, there is a full article on Blocking vs Non-Blocking.

Node is similar in design to, and influenced by, systems like Ruby's Event Machine or Python's Twisted. Node takes the event model a bit further. It presents an event loop as a runtime construct instead of as a library. In other systems there is always a blocking call to start the event-loop. Typically behavior is defined through callbacks at the beginning of a script and at the end starts a server through a blocking call like EventMachine::run(). In Node there is no such start-the-event-loop call. Node simply enters the event loop after executing the input script. Node exits the event loop when there are no more callbacks to perform. This behavior is like browser JavaScript — the event loop is hidden from the user.

HTTP is a first class citizen in Node, designed with streaming and low latency in mind. This makes Node well suited for the foundation of a web library or framework.

Just because Node is designed without threads, doesn't mean you cannot take advantage of multiple cores in your environment. Child processes can be spawned by using our child_process.fork() API, and are designed to be easy to communicate with. Built upon that same interface is the cluster module, which allows you to share sockets between processes to enable load balancing over your cores.


Community Committee

The Community Committee (CommComm) is a top-level committee in the Node.js Foundation. The CommComm has authority over outward-facing community outreach efforts, including:

    Community Evangelism
    Education Initiatives
    Cultural Direction of Node.js Foundation
    Community Organization Outreach
    Translation and Internationalization
    Project Moderation/Mediation
    Public Outreach and Publications

There are four types of involvement with the Community Committee:

    A Contributor is any individual creating or commenting on an issue or pull request.
    A Collaborator is a contributor who has been given write access to the repository
    An Observer is any individual who has requested or been requested to attend a CommComm meeting. It is also the first step to becoming a Member.
    A Member is a collaborator with voting rights who has met the requirements of participation and voted in by the CommComm voting process.

For the current list of Community Committee members, see the project's README.md.
Contributors and Collaborators

It is the mission of CommComm to further build out the Node.js Community. If you're reading this, you're already a part of that community – and as a part of the Node.js Community, we'd love to have your help!

The nodejs/community-committee GitHub repository is a great place to start. Check out the issues labeled "Good first issue" to see where we're looking for help. If you have your own ideas on how we can engage and build the community, feel free to open your own issues, create pull requests with improvements to our existing work, or help us by sharing your thoughts and ideas in the ongoing discussions we're having in GitHub.

You can further participate in our ongoing efforts around community building - like localization, evangelism, the Node.js Collection, and others - by digging into their respective repositories and getting involved!

Before diving in, please be sure to read the Collaborator Guide.

If you're interested in participating in the Community Committee as a committee member, you should read the section below on Observers and Membership, and create an issue asking to be an Observer in our next Community Committee meeting. You can find a great example of such an issue here.
Observers and Membership

If you're interested in becoming more deeply involved with the Community Committee and its projects, we encourage you to become an active observer, and work toward achieving member status. To become a member you must:

    Attend the bi-weekly meetings, investigate issues tagged as good first issue, file issues and pull requests, and provide insight via GitHub as a contributor or collaborator.
    Request to become an Observer by filing an issue. Once added as an Observer to meetings, we will track attendance and participation for 3 months, in accordance with our governance guidelines. You can find a great example of such an issue here.
    When you meet the 3 month minimum attendance, and participation expectations, the CommComm will vote to add you as a member.

Membership is for 6 months. The group will ask on a regular basis if the expiring members would like to stay on. A member just needs to reply to renew. There is no fixed size of the CommComm. However, the expected target is between 9 and 12. You can read more about membership, and other administrative details, in our Governance Guide.

Regular CommComm meetings are held bi-monthly in a Zoom video conference, and broadcast live to the public on YouTube. Any community member or contributor can ask that something be added to the next meeting's agenda by logging a GitHub Issue.

Meeting announcements and agendas are posted before the meeting begins in the organization's GitHub issues. You can also find the regularly scheduled meetings on the Node.js Calendar. To follow Node.js meeting livestreams on YouTube, subscribe to the Node.js Foundation YouTube channel. Be sure to click the bell to be notified of new videos!
Consensus Seeking Process

The CommComm follows a Consensus Seeking decision making model.

When an agenda item has appeared to reach a consensus, the moderator will ask "Does anyone object?" as a final call for dissent from the consensus. If a consensus cannot be reached that has no objections then a majority wins vote is called. It is expected that the majority of decisions made by the CommComm are via a consensus seeking process and that voting is only used as a last-resort.


Core Working Groups

Core Working Groups are created by the Technical Steering Committee (TSC).
Current Working Groups

    Addon API
    Benchmarking
    Build
    Diagnostics
    Docker
    Evangelism
    i18n
    Release
    Security
    Streams
    Website

Addon API

The Addon API Working Group is responsible for maintaining the NAN project and corresponding nan package in npm. The NAN project makes available an abstraction layer for native add-on authors for Node.js, assisting in the writing of code that is compatible with many actively used versions of Node.js, V8 and libuv.

Responsibilities include:

    Maintaining the NAN GitHub repository, including code, issues and documentation.
    Maintaining the addon-examples GitHub repository, including code, issues and documentation.
    Maintaining the C++ Addon API within the Node.js project, in subordination to the Node.js TSC.
    Maintaining the Addon documentation within the Node.js project, in subordination to the Node.js TSC.
    Maintaining the nan package in npm, releasing new versions as appropriate.
    Messaging about the future of the Node.js and NAN interface to give the community advance notice of changes.

The current members can be found in their README.
Benchmarking

The purpose of the Benchmark Working Group is to gain consensus on an agreed set of benchmarks that can be used to:

    track and evangelize performance gains made between Node.js releases
    avoid performance regressions between releases

Responsibilities include:

    Identifying 1 or more benchmarks that reflect customer usage. Likely will need more than one to cover typical Node.js use cases including low-latency and high concurrency
    Working to get community consensus on the list chosen
    Adding regular execution of chosen benchmarks to Node.js builds
    Tracking/publicizing performance between builds/releases

Build

The Build Working Group's purpose is to create and maintain a distributed automation infrastructure.

Responsibilities include:

    Producing packages for all target platforms.
    Running tests.
    Running performance testing and comparisons.
    Creating and managing build-containers.

Diagnostics

The Diagnostics Working Group's purpose is to surface a set of comprehensive, documented, and extensible diagnostic interfaces for use by Node.js tools and JavaScript VMs.

Responsibilities include:

    Collaborating with V8 to integrate v8_inspector into Node.js.
    Collaborating with V8 to integrate trace_event into Node.js.
    Collaborating with Core to refine async_wrap and async_hooks.
    Maintaining and improving OS trace system integration (e.g. ETW, LTTNG, dtrace).
    Documenting diagnostic capabilities and APIs in Node.js and its components.
    Exploring opportunities and gaps, discussing feature requests, and addressing conflicts in Node.js diagnostics.
    Fostering an ecosystem of diagnostics tools for Node.js.
    Defining and adding interfaces/APIs in order to allow dumps to be generated when needed.
    Defining and adding common structures to the dumps generated in order to support tools that want to introspect those dumps.

Docker

The Docker Working Group's purpose is to build, maintain, and improve official Docker images for the Node.js project.

Responsibilities include:

    Keeping the official Docker images updated in line with new Node.js releases.
    Decide and implement image improvements and/or fixes.
    Maintain and improve the images' documentation.

Evangelism

The Evangelism Working Group promotes the accomplishments of Node.js and lets the community know how they can get involved.

Responsibilities include:

    Facilitating project messaging.
    Managing official project social media.
    Handling the promotion of speakers for meetups and conferences.
    Handling the promotion of community events.
    Publishing regular update summaries and other promotional content.

i18n

The i18n Working Groups handle more than just translations. They are endpoints for community members to collaborate with each other in their language of choice.

Each team is organized around a common spoken language. Each language community might then produce multiple localizations for various project resources.

Responsibilities include:

    Translating any Node.js materials they believe are relevant to their community.
    Reviewing processes for keeping translations up to date and of high quality.
    Managing and monitoring social media channels in their language.
    Promoting Node.js speakers for meetups and conferences in their language.

Each language community maintains its own membership.

    nodejs-ar - Arabic (العَرَبِيَّة)
    nodejs-bg - Bulgarian (български)
    nodejs-bn - Bengali (বাংলা)
    nodejs-zh-CN - Chinese (中文)
    nodejs-cs - Czech (Čeština)
    nodejs-da - Danish (Dansk)
    nodejs-de - German (Deutsch)
    nodejs-el - Greek (Ελληνικά)
    nodejs-es - Spanish (Español)
    nodejs-fa - Persian (فارسی)
    nodejs-fi - Finnish (Suomi)
    nodejs-fr - French (Français)
    nodejs-he - Hebrew (עברית)
    nodejs-hi - Hindi (हिन्दी)
    nodejs-hu - Hungarian (Magyar)
    nodejs-id - Indonesian (Bahasa Indonesia)
    nodejs-it - Italian (Italiano)
    nodejs-ja - Japanese (日本語)
    nodejs-ka - Georgian (ქართული)
    nodejs-ko - Korean (한국어)
    nodejs-mk - Macedonian (Македонски)
    nodejs-ms - Malay (بهاس ملايو‎)
    nodejs-nl - Dutch (Nederlands)
    nodejs-no - Norwegian (Norsk)
    nodejs-pl - Polish (Język Polski)
    nodejs-pt - Portuguese (Português)
    nodejs-ro - Romanian (Română)
    nodejs-ru - Russian (Русский)
    nodejs-sv - Swedish (Svenska)
    nodejs-ta - Tamil (தமிழ்)
    nodejs-tr - Turkish (Türkçe)
    nodejs-zh-TW - Taiwanese (國語)
    nodejs-uk - Ukrainian (Українська)
    nodejs-vi - Vietnamese (Tiếng Việt)

Release

The Release Working Group manages the release process for Node.js.

Responsibilities include:

    Define the release process.
    Define the content of releases.
    Generate and create releases.
    Test Releases.
    Manage the Long Term Support and Current branches including backporting changes to these branches.
    Define the policy for what gets backported to release streams

Security

The Security Working Group manages all aspects and processes linked to Node.js security.

Responsibilities include:

    Define and maintain security policies and procedures for:
        the core Node.js project
        other projects maintained by the Node.js Technical Steering Committee (TSC).
    Work with the Node Security Platform to bring community vulnerability data into the foundation as a shared asset.
    Ensure the vulnerability data is updated in an efficient and timely manner. For example, ensuring there are well-documented processes for reporting vulnerabilities in community modules.
    Review and recommend processes for handling of security reports (but not the actual administration of security reports, which are reviewed by a group of people directly delegated to by the TSC).
    Define and maintain policies and procedures for the coordination of security concerns within the external Node.js open source ecosystem.
    Offer help to npm package maintainers to fix high-impact security bugs.
    Maintain and make available data on disclosed security vulnerabilities in:
        the core Node.js project
        other projects maintained by the Node.js Foundation technical group
        the external Node.js open source ecosystem
    Promote the improvement of security practices within the Node.js ecosystem.
    Recommend security improvements for the core Node.js project.
    Facilitate and promote the expansion of a healthy security service and product provider ecosystem.

Streams

The Streams Working Group is dedicated to the support and improvement of the Streams API as used in Node.js and the npm ecosystem. We seek to create a composable API that solves the problem of representing multiple occurrences of an event over time in a humane, low-overhead fashion. Improvements to the API will be driven by the needs of the ecosystem; interoperability and backwards compatibility with other solutions and prior versions are paramount in importance.

Responsibilities include:

    Addressing stream issues on the Node.js issue tracker.
    Authoring and editing stream documentation within the Node.js project.
    Reviewing changes to stream subclasses within the Node.js project.
    Redirecting changes to streams from the Node.js project to this project.
    Assisting in the implementation of stream providers within Node.js.
    Recommending versions of readable-stream to be included in Node.js.
    Messaging about the future of streams to give the community advance notice of changes.

Website

The Website Working Group's purpose is to build and maintain a public website for the Node.js project.

Responsibilities include:

    Developing and maintaining a build and automation system for nodejs.org.
    Ensuring the site is regularly updated with changes made to Node.js, like releases and features.
    Fostering and enabling a community of translators.
